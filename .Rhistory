niveis <- c("PE", "CE", "SP", "AM")
rotulos <- c("Pernambuco", "Ceará", "São Paulo", "Amazonas")
valores <- c("PE", "CE", "SP", "SP", "PE", "SP", "AM", "AM", "PE", "SP", "CE")
resultado <- factor(valores, labels = rotulos, ordered = TRUE, levels = niveis)
resultado[1] < resultado[2]
resultado[1] > resultado[4]
resultado[1] == resultado[1]
resultado <- factor(valores, labels = rotulos, ordered = FALSE, levels = niveis)
resultado[1] < resultado[2]
resultado[1] > resultado[4]
resultado[1] == resultado[1]
valor1 <- 55
vetor1 <- c(-3i, 2i)
matriz <- matrix(c(2, 3, 4, -1), nrow = 2)
dataf1 <- cbind(c(1, 2, 3), c("leandro", "caio", "marcos"), c(TRUE, FALSE, FALSE))
dataf2 <- mtcars
lista1 <- list(-3, "a", 7, 8:12)
lista2 <- list(valor1, vetor1, matriz, dataf1, dataf2, lista1)
vetor2 = c(999, "6", 7, 8:12)
vetor2
lista3 = list(999, "6", 7, 8:12)
lista3
typeof(vetor2[1])
typeof(lista2[[1]])
typeof(vetor2[4])
typeof(lista3[[4]])
lista1 <- list("casa", 987, TRUE)
elementos <- c("objeto", "número", "tem_garagem")
names(lista1) <- elementos
lista1
matriz <- matrix(c(-1, 2, 0, 1, 2, 4, 5, -1, 4), nrow = 3)
lista2 <- list(TRUE, 876, matriz)
valores_colunas <- c("coluna1", "coluna2", "coluna3")
valores_linhas <- c("linha1", "linha2", "linha3")
colnames(lista2[[3]]) <- valores_colunas
rownames(lista2[[3]]) <- valores_linhas
lista2[[3]]
lista2[[3]]
matriz
colnames(matriz) <- valores_colunas
rownames(matriz) <- valores_linhas
(matriz
matriz
matriz
valor1 <- 55
vetor1 <- c(-3i, 2i)
matriz <- matrix(c(2, 3, 4, -1), nrow = 2)
dataf1 <- cbind(c(1, 2, 3), c("leandro", "caio", "marcos"), c(TRUE, FALSE, FALSE))
dataf2 <- mtcars
lista1 <- list(-3, "a", 7, 8:12)
lista2 <- list(valor1, vetor1, matriz, dataf1, dataf2, lista1)
lista2[6]
lista2[6]
lista2[[6]]
lista2[2]
lista2[[2]]
lista2[[2]][1]
lista2[[5]][,3]
lista2[[5]][4,]
lista2[[5]][4, 2]
lista2[[5]]$mpg
lista2[[5]]["hp"]
lista2[[5]][1:5, "hp"]
lista2[[5]][1, 3]
lista2[[5]][1:5, c("hp", "mpg")]
names(lista2) <- c("valor", "vetor", "matriz", "data1", "data2", "lista")
lista2[["vetor"]][1]
lista2[[5]][4, 2] = 0
lista2[[5]][4, 2]
nova_col <- c(4, 4)
cbind(lista2[[3]], nova_col)
lista1 <- list("casa", FALSE, 35)
lista2 <- list("a", "b", TRUE, 4:8, lista1)
x <- unlist(lista2)
typeof(x)
x <- unlist(lista2, recursive = FALSE)
typeof(x)
x
lista1 <- list("casa", FALSE, 35)
lista2 <- list("a", "b", TRUE, 4:8, lista1)
lista2
x <- unlist(lista2)
x
x <- unlist(lista2, recursive = FALSE)
x
x <- unlist(lista2, recursive = T)
x
names(lista2) <- c("letra1", "letra2", "logico", "sequencia", "outra_lista")
x <- unlist(lista2, use.names = TRUE)
x
y <- unlist(lista2, use.names = FALSE)
y
visivel <- c(2, -3, 5)
.oculta <- 55
ls()
ls(all = TRUE)
ls(all.names = TRUE)
ls(sorted = TRUE)
ls(sorted = FALSE)
rm(visivel)
remove(visivel)
rm(.oculta)
remove(.oculta)
lista = ls()
rm(list = lista)
rm(list = ls())
rm(list = ls(all.names = TRUE))
matriz <- matrix((1:12), nrow=3)
matriz
apply(matriz, 1, FUN = max)
apply(matriz, 2, FUN = max)
apply(matriz, 2, FUN = cumsum)
apply(matriz, 1, FUN = cumsum)
apply(matriz, 2, range)
apply(matriz, 2, range)
matriz
apply(matriz, 2, range)
vetor1 <- c(1, 1, 3, 5, 6)
lapply(vetor1, FUN = sqrt)
lista1 <- list(TRUE, 1:3, 3i)
lapply(lista1, sqrt)
df <- data.frame(a=1:3, b=4:6, c=7:9, d=10:12)
df
lapply(df, sqrt)
typeof(x[1])
x <- lapply(df, sqrt)
typeof(x[1])
typeof(x[[1]])
vetor <- c(3, 3, 6, 7, 9)
s_vetor <- lapply(vetor, FUN = sqrt)
typeof(s_vetor)
lista <- c("a", 5, TRUE)
s_lista <- lapply(lista, FUN = sqrt)
sapply(vetor, sqrt)
typeof(sapply(vetor, sqrt))
lista <- list(4, 5, TRUE)
sapply(lista, sqrt)
df <- data.frame(vetor, lista, sqrt)
df <- data.frame(vetor, lista)
sapply(df, sqrt)
lista <- list(4, 5, TRUE, FALSE, 16)
sapply(lista, sqrt)
df <- data.frame(vetor, lista)
sapply(df, sqrt)
df
lista <- list(4, 5, TRUE, FALSE, 16)
lista
df <- data.frame(vetor, lista)
df
df <- data.frame(vetor, vetor*5)
sapply(df, sqrt)
x <- 22
if (x < 18){
print("Maior de idade")
}
if (x > 18){
print("Maior de idade")
}
x <- 12
if (x < 18){
print("Menor de idade")
}
if ((x > 18) & (x < 65)){
print("Adulto")
}
if (x > 65){
print("Idoso")
}
x <- 22
if (x < 18){
print("Menor de idade")
}
if ((x > 18) & (x < 65)){
print("Adulto")
}
if (x > 65){
print("Idoso")
}
x <- 72
if (x < 18){
print("Menor de idade")
}
if ((x > 18) & (x < 65)){
print("Adulto")
}
if (x > 65){
print("Idoso")
}
x <- 22
if (x > 18){
if (x < 65){
print("Adulto")
}
else{
print("Idoso")
}
}
x <- 72
if (x > 18){
if (x < 65){
print("Adulto")
}
else{
print("Idoso")
}
}
x <- 22
if (x > 18){
print("Maior de idade")
}
else{
x <- 22
if (x > 18){
print("Maior de idade")
}else{
print("Menor de idade")
}
x <- 12
if (x > 18){
print("Maior de idade")
}else{
print("Menor de idade")
}
x <- 2
if (x < 3){
print("Bebê")
}else if (x < 12){
print("Criança")
}else if (x < 18){
print("Adolesecente")
}else if (x < 65){
print("Adulto")
}else{
print("Idoso")
}
x <- 14
if (x < 3){
print("Bebê")
}else if (x < 13){
print("Criança")
}else if (x < 18){
print("Adolesecente")
}else if (x < 65){
print("Adulto")
}else{
print("Idoso")
}
x <- 14
if (x < 3){
print("Bebê")
}else if (x < 13){
print("Criança")
}else if (x < 18){
print("Adolescente")
}else if (x < 65){
print("Adulto")
}else{
print("Idoso")
}
x <- 19
if (x < 3){
print("Bebê")
}else if (x < 13){
print("Criança")
}else if (x < 18){
print("Adolescente")
}else if (x < 65){
print("Adulto")
}else{
print("Idoso")
}
x <- 99
if (x < 3){
print("Bebê")
}else if (x < 13){
print("Criança")
}else if (x < 18){
print("Adolescente")
}else if (x < 65){
print("Adulto")
}else{
print("Idoso")
}
x <- 30
res <- if (x == 30) "igual" else "diferente"
res
x = 5
ifelse(x < 2, "a", "b")
x = 4
switch (x, 1, 2, 3, "b")
x = 3
switch (x, 1, 2, 7, "b")
x = 4
valor = switch (x, 1, 2, 3, "b")
print(valor)
x = c(4, 7, 99, "gf", "kk", TRUE)
for (valor in x) {
print(valor)
}
x = list(4, 7, 99, "gf", "kk", TRUE)
for (valor in x) {
print(valor)
}
x = 4
while (x < 10) {
print(x)
x <- x+1
if(x > 7){
break
}
}
x = 4
while (x < 30) {
print(x)
if(x > 10){
next
}
x <- x + 1
}
y = c(-1,2,5, 7, 11, 13, 11, 10, 77)
for (valor in y) {
print(y)
if(y > 7){
break
}
}
y = c(-1,2,5, 7, 11, 13, 11, 10, 77)
for (valor in y) {
print(valor)
if(valor > 7){
break
}
}
y = c(-1, 2, 5, 7, 11, 13, 11, 10, 77, 5, 3, 11)
for (valor in y) {
if(valor > 7){
next
}
print(valor)
}
cont = 0
repeat{
cont = cont + 1
print(cont)
}
cont = 0
repeat{
cont = cont + 1
print(cont)
if(cont > 10){
break
}
}
cont = 0
repeat{
cont = cont + 1
if(cont > 10){
break
}
print(cont)
}
cont = 0
repeat{
if (cont %% 2 != 0){
next
}
print(cont)
}
cont = 0
repeat{
if (cont %% 2 != 0){
next
}
print(cont)
cont <- cont + 1
}
cont = 0
repeat{
if (cont %% 2 != 0){
next
}
print(cont)
cont <- cont + 1
}
3 %% 2
cont <- -1
repeat{
cont <- cont + 1
if (cont %% 2 != 0){
next
}
print(cont)
}
cont <- -1
repeat{
cont <- cont + 1
if (cont %% 2 != 0){
next
}
print(cont)
}
nova = function(string){
msg = paste("Mensagem", string, sep = ": ")
print(msg)
}
typeof(nova)
nova("Olá,mundo!")
nova = function(string){
msg = paste("Mensagem", string, sep = ": ")
return(msg)
}
frase = nova("Olá,mundo!")
print(frase)
nova = function(string){
msg = paste("Mensagem", string, sep = ": ")
toupper(msg)
}
frase = nova("Olá,mundo!")
print(frase)
nova = function(nome, sobrenome, idade){
msg = paste(nome, sobrenome, "tem", idade, "anos.")
print(msg)
}
nova("Leandro", "Luz", 32)
nova(idade = 32, sobrenome = "Luz", nome = "Leandro")
nova(32, "Luz", "Leandro")
soma = function(...){
vetor = c(...)
soma = 0
for(valor in vetor){
soma = soma + vetor
}
return(soma)
}
print(soma(5, 6, 7, 8, 2:4, c(1, 1, 1)))
soma = function(...){
vetor = c(...)
soma = 0
for(valor in vetor){
soma = soma + valor
}
return(soma)
}
print(soma(5, 6, 7, 8, 2:4, c(1, 1, 1)))
soma_arbit = function(...){
vetor = c(...)
soma = 0
for(valor in vetor){
soma = soma + valor
}
return(soma)
}
print(soma_arbit(5, 6, 7, 8, 2:4))
print(soma_arbit(5, 6, 7, 8, 2:4, c(1, 1, 1)))
print(soma_arbit(5, 6, 7, 8, 2:4, c(1, 1, 1), c(-5,-5,-5)))
soma = function(..., teste = TRUE){
if(teste){
vetor = c(...)
soma = 0
for(valor in vetor){
soma = soma + valor
}
return(soma)
}else{
return(0)
}
}
print(soma(teste = FALSE, 5, 6, 7, 8, 2:4, c(1, 1, 1)))
print(soma(teste = TRUE, 5, 6, 7, 8, 2:4, c(1, 1, 1)))
print(soma(5, 6, 7, 8, teste = TRUE, 2:4, c(1, 1, 1)))
print(soma(5, 6, 7, 8, 2:4, c(1, 1, 1), TRUE))
print(soma(TRUE, 5, 6, 7, 8, 2:4, c(1, 1, 1)))
print(soma(TRUE, 5, 6, 7, 8, 2:4, c(1, 1, 1)))
install.packages("utils")
library(utils)
tabela <- read.csv("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.csv")
tabela <- read.csv("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.csv", header = TRUE, sep = ";")
View(tabela)
View(tabela)
view(mtcars)
View(tabela)
view(mtcars)
View(mtcars)
tabela <- read.csv2("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.csv", header = TRUE)
tabela
?read_delim
read.xlsx("E:\\GITHUB\\RProject\\DataSets\\Dados_EB.xlsx", sheetIndex = 5)
library(xlsx)
read.xlsx("E:\\GITHUB\\RProject\\DataSets\\Dados_EB.xlsx", sheetIndex = 5)
read.xlsx("E:\\GITHUB\\RProject\\DataSets\\Dados_EB.xlsx", sheetIndex = 5, header = TRUE)
read.xlsx("E:\\GITHUB\\RProject\\DataSets\\Dados_EB.xlsx", sheetName = "CD-Municipios")
read.xlsx("E:\\GITHUB\\RProject\\DataSets\\Dados_EB.xlsx", sheetName = "CD-Municipios", header = TRUE)
read.xlsx(file.choose(), sheetIndex = 5)
library(data.table)
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx")
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx", data.table = FALSE)
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx")
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xls")
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx")
library(data.table)
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx")
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx")
tabela <- fread("E:\\GITHUB\\RProject\\DataSets\\tabela2_1.xlsx", data.table = FALSE)
caminho <- file.path("E:","GITHUB","RProject","DataSets")
x <- readline("Digite o número de repetições:")
while(x > 0){
print("Nada a ver, meu irmão!")
x <- x - 1
}
source( "E:\\GITHUB\\RProject\\Testes\\teste.R")
source( "E:\\GITHUB\\RProject\\Testes\\teste.R")
source( "E:\\GITHUB\\RProject\\Testes\\teste.R")
